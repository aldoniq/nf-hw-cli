#!/usr/bin/env node
const fs = require('fs');
require('dotenv').config()
var Choices = require('prompt-choices');
const chalk = require("chalk");
const boxen = require("boxen");
const yargs = require("yargs");
const figlet = require('figlet');
const greeting =  require('./greeting');
const { base } = require('airtable');
var Airtable = require('airtable');
const { time } = require('console');
var airtable = new Airtable({apiKey: process.env["API_KEY"] });
var sendHW = airtable.base(process.env["BASE_ID"]);
const inquirer = require('inquirer');
let homeworkList = require('./homeworks.json');
let studentList = require('./students.json');
const inquirerPrompt = require('inquirer-autocomplete-prompt');

const CLIInfinityProgress = require('cli-infinity-progress');
const colors = require('cli-infinity-progress/colors');

const progress = new CLIInfinityProgress();
greeting.greeting()

async function run() {
    const { checking, student, homework, linkSandbox, linkGithub, comment } = await chooseStudent();
    const value = await sendToServer({checking, student, homework,linkSandbox, linkGithub,comment });
  }
function chooseStudent() {
    const questions = [
        {
            type: 'text',
            name: 'checking',
            message: '–¢—ã —Ç–æ—á–Ω–æ –Ω–∞—à —Å—Ç—É–¥–µ–Ω—Ç? ü§® –í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: ',
            validate: value => {
                const check = value.includes(process.env["SECRET_ANSWER"])
                return new Promise((resolve, reject) => {
                    if (!check){
                        reject("–ö–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ –Ω–∞—à —Å—Ç—É–¥–µ–Ω—Ç :) –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ: ")
                    } else {
                        resolve(true)
                    }
                })
            }
        },
        {
            type: 'search-list',
            name: 'student',
            message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è: ',
            choices: studentList.map(student => student),
            
        },
        {
            type: 'search-list',
            name: 'homework',
            message: '–ö–∞–∫—É—é –¥–æ–º–∞—à–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?',
            choices: homeworkList.map(homework => homework)
        },
        {
            type: 'text',
            name: 'linkSandbox',
            message: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à codeSandBox/npm: '
        },
        {
            type: 'text',
            name: 'linkGithub',
            message: '–î–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ',
            validate: value => {
                const check = value.includes('github.com')
                return new Promise((resolve, reject) => {
                    if (!check){
                        reject("–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GITHUB!!!")
                    } else {
                        resolve(true)
                    }
                })
            }
        },
        {
            type: 'text',
            name: 'comment',
            message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –¥–æ–º–∞—à–∫–µ: ',
        },
        
    ];
    inquirer.registerPrompt("search-list", require("inquirer-search-list"));
    return inquirer.prompt(questions)
}



async function sendToServer({checking, student, homework,linkSandbox, linkGithub,comment }) {
    if (checking === process.env["SECRET_ANSWER"]){
        progress.setBackgroundColor(colors.white)
        .setHeader('Sending ...')
        .setFooter('\nPlease be patient.')
        .setBarChar('ü§úüìß')
        .setBackgroundChar(' ')
        .setDirectionLeftToRight()
        .setSize(20)
        .setBarSize(1)
        .setRefreshRate(150)
        .start();
    await sendHW('HW Submissions').create([
    {
        "fields": {
            "HW Submission Link ID": [
                studentList.filter(x => x.name === student)[0].id
            ],
            "Homework": [
                homeworkList.filter(h => h.name === homework)[0].id
            ],
            "Sandbox": linkSandbox,
            "github repo": linkGithub,
            "Student's comment": comment
        }
        }
    ], function(err, records) {
        if (err) {
        console.error(err);
        return;
        }
        records.forEach(function (record) {
            const boxenOptions = {
                padding: 1,
                margin: 1,
                borderStyle: "round",
                borderColor: "green",
                backgroundColor: "#555555"
            };
            const end = boxen(chalk.white.bold(`–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π CLI!!!\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`), boxenOptions );
            progress.remove();
            console.log(end);
        });
    });
    } else {
        console.log("–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–≤–∏–Ω–∏—Ç–µ)");
    }
    
  }
run();
